tet=[[(0,1), (0,2), (0,3)],[(1,0), (2,0), (3,0)], # ㅣ(회전)
	[(0,1), (1,0), (1,1)],  # ㅁ
    [(1,0), (2,0), (2,1)], [(0,1), (0,2), (1,0)], [(0,1), (1,1), (2,1)], [(0,1), (0,2),(-1,2)], # ㄴ(회전)
    [(0,1),(-1,1),(-2,1)], [(1,0), (1,1), (1,2)], [(0,1), (1,0), (2,0)], [(0,1), (0,2), (1,2)], # ㄴ대칭(회전)
    [(1,0), (1,1), (2,1)], [(0,1),(-1,1),(-1,2)],   # ㄹ(회전)
    [(1,0), (0,1),(-1,1)], [(0,1), (1,1), (1,2)],   # ㄹ대칭(회전)
    [(0,1), (0,2), (1,1)], [(-1,1),(0,1), (1,1)], [(0,1), (0,2),(-1,1)], [(1,0), (2,0), (1,1)]] # ㅏ(회전)

n, m = tuple(map(int, input().split()))

board = [list(map(int, input().split())) for _ in range(n)]
answer = 0

def cal(i, j, k):
    y, x = i, j
    tmp = board[y][x]
    for a in range(len(k)):
        if  0 <= y + k[a][0] < n and 0 <= x + k[a][1] < m:
            tmp += board[y + k[a][0]][x + k[a][1]]
        else:
            return 0
    return tmp


for i in range(n):
    for j in range(m):
        for k in tet:
            tmp = cal(i, j, k)
            answer = max(answer, tmp)


print(answer)
